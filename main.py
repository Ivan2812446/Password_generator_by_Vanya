import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import random
import string
import json
import base64
import os
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import pyperclip

class PasswordManager:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Password Vault")
        self.root.geometry("800x700")
        self.root.configure(bg='#2c3e50')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–º—É
        self.set_modern_theme()
        
        self.language = 'english'
        self.master_password = None
        self.fernet = None
        self.data_file = 'passwords.vault'
        
        self.translatable_widgets = {}
        self.language_buttons = {}
        self.vault_widgets = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        
        self.setup_ui()
        self.check_first_run()
        
    def set_modern_theme(self):
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã —Å –≥–ª–∞–¥–∫–∏–º–∏ –≥—Ä–∞–Ω—è–º–∏
        style.configure('TFrame', background='#34495e')
        style.configure('TLabel', background='#34495e', foreground='#ecf0f1', 
                       font=('Segoe UI', 10))
        style.configure('TButton', background='#3498db', foreground='white', 
                       font=('Segoe UI', 10, 'normal'), borderwidth=0,
                       focuscolor='none', relief='flat')
        style.map('TButton', 
                 background=[('active', '#2980b9'), ('pressed', '#21618c')])
        
        style.configure('Language.TButton', background='#2c3e50', foreground='#bdc3c7',
                       font=('Segoe UI', 10, 'normal'))
        style.map('Language.TButton',
                 background=[('active', '#34495e'), ('selected', '#3498db')],
                 foreground=[('selected', 'white')])
        
        style.configure('Selected.TButton', background='#3498db', foreground='white')
        style.map('Selected.TButton',
                 background=[('active', '#2980b9')])
        
        style.configure('Accent.TButton', background='#e74c3c', foreground='white')
        style.map('Accent.TButton', background=[('active', '#c0392b')])
        
        style.configure('Header.TLabel', font=('Segoe UI', 18, 'bold'), 
                       foreground='#3498db', background='#34495e')
        style.configure('TCheckbutton', background='#34495e', foreground='#ecf0f1')
        style.configure('TEntry', fieldbackground='#ecf0f1', borderwidth=1,
                       relief='flat', font=('Segoe UI', 10))
        style.configure('TSpinbox', fieldbackground='#ecf0f1')
        style.configure('TNotebook', background='#34495e', borderwidth=0)
        style.configure('TNotebook.Tab', background='#2c3e50', foreground='#bdc3c7',
                       padding=[15, 5], font=('Segoe UI', 10, 'normal'))
        style.map('TNotebook.Tab', 
                 background=[('selected', '#3498db')], 
                 foreground=[('selected', 'white')])
        
        style.configure('Search.TEntry', font=('Segoe UI', 10))
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        style.configure('Vault.TFrame', background='#2c3e50')
        style.configure('Vault.TLabel', background='#2c3e50', foreground='#ecf0f1')
        
    def check_first_run(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å"""
        if not os.path.exists(self.data_file):
            self.show_first_run_dialog()
            
    def show_first_run_dialog(self):
        """–î–∏–∞–ª–æ–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        dialog = tk.Toplevel(self.root)
        dialog.title("First Run / –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫")
        dialog.geometry("500x300")
        dialog.configure(bg='#34495e')
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.update_idletasks()
        x = (self.root.winfo_screenwidth() - dialog.winfo_width()) // 2
        y = (self.root.winfo_screenheight() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")
        
        ttk.Label(dialog, text="üîê Welcome to Password Vault\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Password Vault", 
                 style='Header.TLabel', justify='center').pack(pady=20)
        
        ttk.Label(dialog, text="Please set a master password to secure your vault\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", 
                 justify='center').pack(pady=10)
        
        ttk.Label(dialog, text="Master Password / –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:").pack(pady=5)
        master_var = tk.StringVar()
        master_entry = ttk.Entry(dialog, textvariable=master_var, show='‚Ä¢', font=('Segoe UI', 12))
        master_entry.pack(pady=5, padx=50, fill='x')
        
        ttk.Label(dialog, text="Confirm Master Password / –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:").pack(pady=5)
        confirm_var = tk.StringVar()
        confirm_entry = ttk.Entry(dialog, textvariable=confirm_var, show='‚Ä¢', font=('Segoe UI', 12))
        confirm_entry.pack(pady=5, padx=50, fill='x')
        
        def set_master_password():
            if master_var.get() != confirm_var.get():
                messagebox.showerror("Error / –û—à–∏–±–∫–∞", 
                                   "Passwords don't match / –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return
            if len(master_var.get()) < 4:
                messagebox.showerror("Error / –û—à–∏–±–∫–∞", 
                                   "Password too short / –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return
                
            self.master_var.set(master_var.get())
            self.unlock_vault(initial_setup=True)
            dialog.destroy()
            
        ttk.Button(dialog, text="Set Master Password / –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å", 
                  command=set_master_password, style='Accent.TButton').pack(pady=20)
        
        master_entry.focus()
        
    def setup_ui(self):
        # Header
        header_frame = ttk.Frame(self.root, style='TFrame')
        header_frame.pack(fill='x', pady=20)
        
        title_label = ttk.Label(header_frame, text="üîê Password Vault", style='Header.TLabel')
        title_label.pack()
        self.translatable_widgets[title_label] = ('text', "üîê Password Vault", "üîê –•—Ä–∞–Ω–∏–ª–∏—â–µ –ü–∞—Ä–æ–ª–µ–π")
        
        # Control buttons frame
        control_frame = ttk.Frame(self.root, style='TFrame')
        control_frame.pack(fill='x', pady=10)
        
        lang_frame = ttk.Frame(control_frame, style='TFrame')
        lang_frame.pack(side='left', padx=20)
        
        # –ö–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –≤—ã–±–æ—Ä–∞
        en_btn = ttk.Button(lang_frame, text="EN", 
                           command=lambda: self.set_language('english'),
                           style='Language.TButton')
        en_btn.pack(side='left', padx=2)
        self.language_buttons['english'] = en_btn
        
        ru_btn = ttk.Button(lang_frame, text="RU", 
                           command=lambda: self.set_language('russian'),
                           style='Language.TButton')
        ru_btn.pack(side='left', padx=2)
        self.language_buttons['russian'] = ru_btn
        
        about_btn = ttk.Button(control_frame, text="‚Ñπ About", command=self.show_about)
        about_btn.pack(side='right', padx=20)
        self.translatable_widgets[about_btn] = ('text', "‚Ñπ About", "‚Ñπ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        
        # Notebook for tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Generator tab
        gen_frame = ttk.Frame(self.notebook, style='TFrame')
        self.notebook.add(gen_frame, text=self.tr("Generator"))
        
        self.setup_generator_tab(gen_frame)
        
        # Vault tab
        vault_frame = ttk.Frame(self.notebook, style='TFrame')
        self.notebook.add(vault_frame, text=self.tr("Vault"))
        
        self.setup_vault_tab(vault_frame)
        
        # Manual Entry tab
        manual_frame = ttk.Frame(self.notebook, style='TFrame')
        self.notebook.add(manual_frame, text=self.tr("Manual Entry"))
        
        self.setup_manual_tab(manual_frame)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é —è–∑—ã–∫–∞
        self.update_language_indicators()
        
    def setup_generator_tab(self, parent):
        # Length selection
        length_frame = ttk.Frame(parent, style='TFrame')
        length_frame.pack(fill='x', pady=15, padx=20)
        
        length_label = ttk.Label(length_frame, text=self.tr("Password Length:"))
        length_label.pack(side='left')
        self.translatable_widgets[length_label] = ('text', "Password Length:", "–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:")
        
        self.length_var = tk.IntVar(value=16)
        length_spin = ttk.Spinbox(length_frame, from_=8, to=50, textvariable=self.length_var, width=8)
        length_spin.pack(side='left', padx=10)
        
        # Character options
        options_frame = ttk.LabelFrame(parent, text=self.tr("Character Settings"), style='TFrame')
        options_frame.pack(fill='x', pady=15, padx=20)
        
        self.symbols_var = tk.BooleanVar(value=True)
        self.numbers_var = tk.BooleanVar(value=True)
        self.letters_var = tk.BooleanVar(value=True)
        self.ambiguous_var = tk.BooleanVar(value=False)
        
        symbols_cb = ttk.Checkbutton(options_frame, text=self.tr("Symbols (!@#$%)"), variable=self.symbols_var)
        symbols_cb.pack(anchor='w', pady=2)
        self.translatable_widgets[symbols_cb] = ('text', "Symbols (!@#$%)", "–°–∏–º–≤–æ–ª—ã (!@#$%)")
        
        numbers_cb = ttk.Checkbutton(options_frame, text=self.tr("Numbers (123)"), variable=self.numbers_var)
        numbers_cb.pack(anchor='w', pady=2)
        self.translatable_widgets[numbers_cb] = ('text', "Numbers (123)", "–¶–∏—Ñ—Ä—ã (123)")
        
        letters_cb = ttk.Checkbutton(options_frame, text=self.tr("Letters (ABC)"), variable=self.letters_var)
        letters_cb.pack(anchor='w', pady=2)
        self.translatable_widgets[letters_cb] = ('text', "Letters (ABC)", "–ë—É–∫–≤—ã (ABC)")
        
        ambiguous_cb = ttk.Checkbutton(options_frame, text=self.tr("Allow ambiguous characters (Il1O0)"), 
                                      variable=self.ambiguous_var)
        ambiguous_cb.pack(anchor='w', pady=2)
        self.translatable_widgets[ambiguous_cb] = ('text', "Allow ambiguous characters (Il1O0)", 
                                                 "–†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (Il1O0)")
        
        # Generate button
        generate_btn = ttk.Button(parent, text=self.tr("Generate Password"), 
                                 command=self.generate_password)
        generate_btn.pack(pady=20)
        self.translatable_widgets[generate_btn] = ('text', "Generate Password", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")
        
        # Password display
        password_frame = ttk.Frame(parent, style='TFrame')
        password_frame.pack(fill='x', pady=10, padx=20)
        
        self.password_var = tk.StringVar()
        password_entry = ttk.Entry(password_frame, textvariable=self.password_var, 
                                  font=('Consolas', 14), justify='center')
        password_entry.pack(fill='x', pady=5)
        
        # Save to vault section
        save_section = ttk.LabelFrame(parent, text=self.tr("Save Password"), style='TFrame')
        save_section.pack(fill='x', pady=15, padx=20)
        
        # Site
        site_frame = ttk.Frame(save_section, style='TFrame')
        site_frame.pack(fill='x', pady=8, padx=10)
        
        site_label = ttk.Label(site_frame, text=self.tr("Website:"))
        site_label.pack(side='left')
        self.translatable_widgets[site_label] = ('text', "Website:", "–°–∞–π—Ç:")
        
        self.site_var = tk.StringVar()
        site_entry = ttk.Entry(site_frame, textvariable=self.site_var)
        site_entry.pack(side='left', padx=10, fill='x', expand=True)
        
        # Login
        login_frame = ttk.Frame(save_section, style='TFrame')
        login_frame.pack(fill='x', pady=8, padx=10)
        
        login_label = ttk.Label(login_frame, text=self.tr("Login:"))
        login_label.pack(side='left')
        self.translatable_widgets[login_label] = ('text', "Login:", "–õ–æ–≥–∏–Ω:")
        
        self.login_var = tk.StringVar()
        login_entry = ttk.Entry(login_frame, textvariable=self.login_var)
        login_entry.pack(side='left', padx=10, fill='x', expand=True)
        
        save_btn = ttk.Button(save_section, text=self.tr("Save to Vault"), command=self.save_to_vault)
        save_btn.pack(pady=10)
        self.translatable_widgets[save_btn] = ('text', "Save to Vault", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        
    def setup_vault_tab(self, parent):
        # Master password protection
        self.master_frame = ttk.LabelFrame(parent, text=self.tr("Vault Security"), style='TFrame')
        self.master_frame.pack(fill='x', pady=15, padx=20)
        self.translatable_widgets[self.master_frame] = ('text', "Vault Security", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        
        master_label = ttk.Label(self.master_frame, text=self.tr("Master Password:"))
        master_label.pack(side='left', padx=10)
        self.translatable_widgets[master_label] = ('text', "Master Password:", "–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:")
        
        self.master_var = tk.StringVar()
        master_entry = ttk.Entry(self.master_frame, textvariable=self.master_var, show='‚Ä¢')
        master_entry.pack(side='left', padx=5, fill='x', expand=True)
        
        unlock_btn = ttk.Button(self.master_frame, text=self.tr("Unlock Vault"), command=self.unlock_vault)
        unlock_btn.pack(side='left', padx=10)
        self.translatable_widgets[unlock_btn] = ('text', "Unlock Vault", "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        
        # Search frame
        search_frame = ttk.Frame(parent, style='TFrame')
        search_frame.pack(fill='x', pady=10, padx=20)
        
        search_label = ttk.Label(search_frame, text=self.tr("Search:"))
        search_label.pack(side='left')
        self.translatable_widgets[search_label] = ('text', "Search:", "–ü–æ–∏—Å–∫:")
        
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, style='Search.TEntry')
        search_entry.pack(side='left', padx=10, fill='x', expand=True)
        search_entry.bind('<KeyRelease>', self.search_passwords)
        
        # Vault content
        self.vault_content_frame = ttk.LabelFrame(parent, text=self.tr("Stored Passwords"), style='TFrame')
        self.vault_content_frame.pack(fill='both', expand=True, pady=15, padx=20)
        self.translatable_widgets[self.vault_content_frame] = ('text', "Stored Passwords", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏")
        
        # Create a canvas and scrollbar for the vault with DARK background
        self.vault_canvas = tk.Canvas(self.vault_content_frame, bg='#2c3e50', highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.vault_content_frame, orient="vertical", command=self.vault_canvas.yview)
        self.scrollable_frame = ttk.Frame(self.vault_canvas, style='Vault.TFrame')
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.vault_canvas.configure(scrollregion=self.vault_canvas.bbox("all"))
        )
        
        self.vault_canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.vault_canvas.configure(yscrollcommand=scrollbar.set)
        
        self.vault_canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
        scrollbar.pack(side="right", fill="y")
        
        # Bind mouse wheel to scroll
        self.vault_canvas.bind("<MouseWheel>", self._on_mousewheel)
        
    def _on_mousewheel(self, event):
        self.vault_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
    def setup_manual_tab(self, parent):
        manual_frame = ttk.LabelFrame(parent, text=self.tr("Add Password Manually"), style='TFrame')
        manual_frame.pack(fill='both', expand=True, pady=20, padx=20)
        self.translatable_widgets[manual_frame] = ('text', "Add Password Manually", "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é")
        
        # Site
        site_frame = ttk.Frame(manual_frame, style='TFrame')
        site_frame.pack(fill='x', pady=10, padx=20)
        
        site_label = ttk.Label(site_frame, text=self.tr("Website:"))
        site_label.pack(anchor='w')
        self.translatable_widgets[site_label] = ('text', "Website:", "–°–∞–π—Ç:")
        
        self.manual_site_var = tk.StringVar()
        site_entry = ttk.Entry(site_frame, textvariable=self.manual_site_var, font=('Segoe UI', 10))
        site_entry.pack(fill='x', pady=5)
        
        # Login
        login_frame = ttk.Frame(manual_frame, style='TFrame')
        login_frame.pack(fill='x', pady=10, padx=20)
        
        login_label = ttk.Label(login_frame, text=self.tr("Login:"))
        login_label.pack(anchor='w')
        self.translatable_widgets[login_label] = ('text', "Login:", "–õ–æ–≥–∏–Ω:")
        
        self.manual_login_var = tk.StringVar()
        login_entry = ttk.Entry(login_frame, textvariable=self.manual_login_var, font=('Segoe UI', 10))
        login_entry.pack(fill='x', pady=5)
        
        # Password
        password_frame = ttk.Frame(manual_frame, style='TFrame')
        password_frame.pack(fill='x', pady=10, padx=20)
        
        password_label = ttk.Label(password_frame, text=self.tr("Password:"))
        password_label.pack(anchor='w')
        self.translatable_widgets[password_label] = ('text', "Password:", "–ü–∞—Ä–æ–ª—å:")
        
        self.manual_password_var = tk.StringVar()
        password_entry = ttk.Entry(password_frame, textvariable=self.manual_password_var, 
                                 font=('Segoe UI', 10), show='‚Ä¢')
        password_entry.pack(fill='x', pady=5)
        
        show_pass_var = tk.BooleanVar()
        show_pass_cb = ttk.Checkbutton(password_frame, text=self.tr("Show password"), 
                                      variable=show_pass_var,
                                      command=lambda: self.toggle_password_visibility(
                                          password_entry, show_pass_var.get()))
        show_pass_cb.pack(anchor='w', pady=5)
        self.translatable_widgets[show_pass_cb] = ('text', "Show password", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")
        
        # Buttons
        button_frame = ttk.Frame(manual_frame, style='TFrame')
        button_frame.pack(fill='x', pady=20, padx=20)
        
        save_manual_btn = ttk.Button(button_frame, text=self.tr("Save Password"), 
                                    command=self.save_manual_entry)
        save_manual_btn.pack(side='left', padx=5)
        self.translatable_widgets[save_manual_btn] = ('text', "Save Password", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        
        clear_btn = ttk.Button(button_frame, text=self.tr("Clear Fields"), 
                              command=self.clear_manual_fields)
        clear_btn.pack(side='left', padx=5)
        self.translatable_widgets[clear_btn] = ('text', "Clear Fields", "–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è")
        
    def toggle_password_visibility(self, entry, show):
        entry.config(show='' if show else '‚Ä¢')
        
    def clear_manual_fields(self):
        self.manual_site_var.set('')
        self.manual_login_var.set('')
        self.manual_password_var.set('')
        
    def save_manual_entry(self):
        if not self.fernet:
            messagebox.showerror(self.tr("Error"), self.tr("Vault is locked!"))
            return
            
        site = self.manual_site_var.get()
        login = self.manual_login_var.get()
        password = self.manual_password_var.get()
        
        if not all([site, login, password]):
            messagebox.showwarning(self.tr("Warning"), self.tr("Please fill all fields"))
            return
            
        new_entry = {
            'site': site,
            'login': login,
            'password': password
        }
        
        self.vault_data.append(new_entry)
        self.save_data()
        messagebox.showinfo(self.tr("Success"), self.tr("Password saved successfully!"))
        self.clear_manual_fields()
        self.update_vault_display()
        
    def generate_password(self):
        length = self.length_var.get()
        characters = ""
        
        if self.symbols_var.get():
            characters += "!@#$%&*+-=?"
        if self.numbers_var.get():
            characters += string.digits
        if self.letters_var.get():
            characters += string.ascii_letters
        
        if not characters:
            messagebox.showwarning(self.tr("Warning"), self.tr("Please select at least one character set"))
            return
        
        if not self.ambiguous_var.get():
            ambiguous_chars = 'Il1O0'
            characters = ''.join(c for c in characters if c not in ambiguous_chars)
        
        password = ''.join(random.choice(characters) for _ in range(length))
        self.password_var.set(password)
        pyperclip.copy(password)
        messagebox.showinfo(self.tr("Success"), self.tr("Password generated and copied to clipboard!"))
        
    def save_to_vault(self):
        if not self.fernet:
            messagebox.showerror(self.tr("Error"), self.tr("Vault is locked!"))
            return
            
        site = self.site_var.get()
        login = self.login_var.get()
        password = self.password_var.get()
        
        if not all([site, login, password]):
            messagebox.showwarning(self.tr("Warning"), self.tr("Please fill all fields"))
            return
            
        new_entry = {
            'site': site,
            'login': login,
            'password': password
        }
        
        self.vault_data.append(new_entry)
        self.save_data()
        messagebox.showinfo(self.tr("Success"), self.tr("Password saved successfully!"))
        self.update_vault_display()
        
    def unlock_vault(self, initial_setup=False):
        master_password = self.master_var.get().encode()
        if not master_password:
            if not initial_setup:
                messagebox.showwarning(self.tr("Warning"), self.tr("Please enter master password"))
            return
            
        try:
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=b'fixed_salt_consider_random',
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(master_password))
            self.fernet = Fernet(key)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ fernet
            self.load_data()
            
            # Test decryption or create new vault
            if os.path.exists(self.data_file):
                with open(self.data_file, 'rb') as f:
                    encrypted = f.read()
                if encrypted:
                    self.fernet.decrypt(encrypted)
            else:
                # Create new vault
                self.vault_data = []
                self.save_data()
            
            self.master_frame.pack_forget()
            self.update_vault_display()
            if not initial_setup:
                messagebox.showinfo(self.tr("Success"), self.tr("Vault unlocked successfully!"))
        except Exception as e:
            messagebox.showerror(self.tr("Error"), self.tr("Wrong master password or corrupted vault!"))
            
    def search_passwords(self, event=None):
        search_term = self.search_var.get().lower()
        if not search_term:
            self.update_vault_display()
            return
            
        filtered_data = [
            entry for entry in self.vault_data 
            if (search_term in entry['site'].lower() or 
                search_term in entry['login'].lower() or
                search_term in entry['password'].lower())
        ]
        self.update_vault_display(filtered_data)
        
    def update_vault_display(self, data=None):
        # Clear the scrollable frame and vault widgets
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        self.vault_widgets.clear()
            
        display_data = data if data is not None else self.vault_data
        
        if not display_data:
            no_data_label = ttk.Label(self.scrollable_frame, 
                                    text=self.tr("No passwords stored yet"),
                                    style='Vault.TLabel')
            no_data_label.pack(pady=20)
            self.vault_widgets.append(no_data_label)
            return
            
        for i, entry in enumerate(display_data):
            # Create a frame for each password entry with DARK background
            entry_frame = ttk.Frame(self.scrollable_frame, style='Vault.TFrame')
            entry_frame.pack(fill='x', pady=8, padx=10)
            self.vault_widgets.append(entry_frame)
            
            # Configure grid weights for proper alignment
            entry_frame.columnconfigure(1, weight=1)
            
            # Site row
            site_label = ttk.Label(entry_frame, text=f"{self.tr('Site')}:", 
                                  font=('Segoe UI', 9, 'bold'), style='Vault.TLabel')
            site_label.grid(row=0, column=0, sticky='w', padx=(0, 5))
            self.vault_widgets.append(site_label)
            
            site_value = ttk.Label(entry_frame, text=entry['site'], 
                                  font=('Segoe UI', 9), style='Vault.TLabel')
            site_value.grid(row=0, column=1, sticky='w')
            self.vault_widgets.append(site_value)
            
            site_copy_btn = ttk.Button(entry_frame, text="üìã", 
                                      command=lambda s=entry['site']: self.copy_to_clipboard(s),
                                      width=3)
            site_copy_btn.grid(row=0, column=2, padx=(5, 0))
            self.vault_widgets.append(site_copy_btn)
            
            # Login row
            login_label = ttk.Label(entry_frame, text=f"{self.tr('Login')}:", 
                                   font=('Segoe UI', 9, 'bold'), style='Vault.TLabel')
            login_label.grid(row=1, column=0, sticky='w', padx=(0, 5))
            self.vault_widgets.append(login_label)
            
            login_value = ttk.Label(entry_frame, text=entry['login'], 
                                   font=('Segoe UI', 9), style='Vault.TLabel')
            login_value.grid(row=1, column=1, sticky='w')
            self.vault_widgets.append(login_value)
            
            login_copy_btn = ttk.Button(entry_frame, text="üìã", 
                                       command=lambda l=entry['login']: self.copy_to_clipboard(l),
                                       width=3)
            login_copy_btn.grid(row=1, column=2, padx=(5, 0))
            self.vault_widgets.append(login_copy_btn)
            
            # Password row
            password_label = ttk.Label(entry_frame, text=f"{self.tr('Password')}:", 
                                      font=('Segoe UI', 9, 'bold'), style='Vault.TLabel')
            password_label.grid(row=2, column=0, sticky='w', padx=(0, 5))
            self.vault_widgets.append(password_label)
            
            password_value = ttk.Label(entry_frame, text="‚Ä¢" * len(entry['password']), 
                                      font=('Consolas', 9), style='Vault.TLabel')
            password_value.grid(row=2, column=1, sticky='w')
            self.vault_widgets.append(password_value)
            
            # Show/hide password functionality
            def toggle_password_display(label, password, button):
                if label.cget('text').startswith('‚Ä¢'):
                    label.config(text=password)
                    button.config(text="üëÅ")
                else:
                    label.config(text="‚Ä¢" * len(password))
                    button.config(text="üìã")
            
            password_copy_btn = ttk.Button(entry_frame, text="üìã", 
                                          command=lambda p=entry['password']: self.copy_to_clipboard(p),
                                          width=3)
            password_copy_btn.grid(row=2, column=2, padx=(5, 0))
            self.vault_widgets.append(password_copy_btn)
            
            # Add show/hide button
            show_hide_btn = ttk.Button(entry_frame, text="üëÅ",
                                      command=lambda l=password_value, p=entry['password'], b=password_copy_btn: 
                                      toggle_password_display(l, p, b),
                                      width=3)
            show_hide_btn.grid(row=2, column=3, padx=(2, 0))
            self.vault_widgets.append(show_hide_btn)
            
            # Copy all button
            copy_all_text = f"{self.tr('Site')}: {entry['site']}\n{self.tr('Login')}: {entry['login']}\n{self.tr('Password')}: {entry['password']}"
            copy_all_btn = ttk.Button(entry_frame, text=self.tr("Copy All"),
                                     command=lambda t=copy_all_text: self.copy_to_clipboard(t))
            copy_all_btn.grid(row=3, column=0, columnspan=4, pady=(5, 0), sticky='we')
            self.vault_widgets.append(copy_all_btn)
            
            # Separator
            separator = ttk.Separator(entry_frame, orient='horizontal')
            separator.grid(row=4, column=0, columnspan=4, sticky='we', pady=(8, 0))
            self.vault_widgets.append(separator)
            
        # Update scroll region
        self.scrollable_frame.update_idletasks()
        self.vault_canvas.configure(scrollregion=self.vault_canvas.bbox("all"))
        
    def copy_to_clipboard(self, text):
        pyperclip.copy(text)
        messagebox.showinfo(self.tr("Success"), self.tr("Copied to clipboard!"))
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.vault_data = []
        if os.path.exists(self.data_file) and self.fernet:
            try:
                with open(self.data_file, 'rb') as f:
                    encrypted = f.read()
                if encrypted:
                    decrypted = self.fernet.decrypt(encrypted)
                    self.vault_data = json.loads(decrypted)
            except Exception as e:
                print(f"Error loading data: {e}")
                self.vault_data = []
                
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        if self.fernet:
            try:
                data_json = json.dumps(self.vault_data).encode()
                encrypted = self.fernet.encrypt(data_json)
                with open(self.data_file, 'wb') as f:
                    f.write(encrypted)
            except Exception as e:
                print(f"Error saving data: {e}")
                
    def set_language(self, lang):
        self.language = lang
        self.update_ui_language()
        self.update_language_indicators()
        messagebox.showinfo(self.tr("Info"), self.tr("Language changed successfully!"))
        
    def update_language_indicators(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        for lang, button in self.language_buttons.items():
            if lang == self.language:
                button.configure(style='Selected.TButton')  # –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ - –≥–æ–ª—É–±–æ–π
            else:
                button.configure(style='Language.TButton')  # –ù–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–π - —Ç–µ–º–Ω—ã–π
        
    def update_ui_language(self):
        # Update notebook tabs
        tabs = ["Generator", "Vault", "Manual Entry"]
        ru_tabs = ["–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–•—Ä–∞–Ω–∏–ª–∏—â–µ", "–†—É—á–Ω–æ–π –≤–≤–æ–¥"]
        
        for i, tab in enumerate(tabs):
            self.notebook.tab(i, text=ru_tabs[i] if self.language == 'russian' else tab)
        
        # Update all registered widgets
        widgets_to_remove = []
        for widget, (attribute, en_text, ru_text) in self.translatable_widgets.items():
            try:
                new_text = ru_text if self.language == 'russian' else en_text
                if attribute == 'text':
                    widget.config(text=new_text)
            except tk.TclError:
                # –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                widgets_to_remove.append(widget)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in widgets_to_remove:
            if widget in self.translatable_widgets:
                del self.translatable_widgets[widget]
                
        # Force update of vault display if it's visible
        if hasattr(self, 'vault_canvas') and self.fernet:
            self.update_vault_display()
                
    def show_about(self):
        about_text_en = """Password Vault v1.0

Secure and minimalistic password manager:
‚Ä¢ Password generation with settings
‚Ä¢ Secure encrypted storage
‚Ä¢ Master password protection
‚Ä¢ Copy to clipboard
‚Ä¢ Search function
‚Ä¢ Multi-language support

The author is Vanek:
GitHub - https://github.com/Ivan2812446/
Telegram - https://t.me/Ivans_Tech_Notes

Your passwords are encrypted using military-grade encryption."""
        
        about_text_ru = """Password Vault v1.0

–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
‚Ä¢ –ó–∞—â–∏—Ç–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–º
‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
‚Ä¢ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤

–ê–≤—Ç–æ—Ä - –í–∞–Ω–µ–∫:
GitHub - https://github.com/Ivan2812446/
Telegram - https://t.me/Ivans_Tech_Notes

–í–∞—à–∏ –ø–∞—Ä–æ–ª–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–æ–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
        
        messagebox.showinfo(self.tr("About"), 
                          about_text_ru if self.language == 'russian' else about_text_en)
        
    def tr(self, text):
        translations = {
            'Generator': {'english': 'Generator', 'russian': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä'},
            'Vault': {'english': 'Vault', 'russian': '–•—Ä–∞–Ω–∏–ª–∏—â–µ'},
            'Manual Entry': {'english': 'Manual Entry', 'russian': '–†—É—á–Ω–æ–π –≤–≤–æ–¥'},
            'Password Length:': {'english': 'Password Length:', 'russian': '–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:'},
            'Character Settings': {'english': 'Character Settings', 'russian': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤'},
            'Symbols (!@#$%)': {'english': 'Symbols (!@#$%)', 'russian': '–°–∏–º–≤–æ–ª—ã (!@#$%)'},
            'Numbers (123)': {'english': 'Numbers (123)', 'russian': '–¶–∏—Ñ—Ä—ã (123)'},
            'Letters (ABC)': {'english': 'Letters (ABC)', 'russian': '–ë—É–∫–≤—ã (ABC)'},
            'Allow ambiguous characters (Il1O0)': {'english': 'Allow ambiguous characters (Il1O0)', 
                                                 'russian': '–†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (Il1O0)'},
            'Generate Password': {'english': 'Generate Password', 'russian': '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å'},
            'Save Password': {'english': 'Save Password', 'russian': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'},
            'Website:': {'english': 'Website:', 'russian': '–°–∞–π—Ç:'},
            'Login:': {'english': 'Login:', 'russian': '–õ–æ–≥–∏–Ω:'},
            'Password:': {'english': 'Password:', 'russian': '–ü–∞—Ä–æ–ª—å:'},
            'Save to Vault': {'english': 'Save to Vault', 'russian': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'},
            'Vault Security': {'english': 'Vault Security', 'russian': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'},
            'Master Password:': {'english': 'Master Password:', 'russian': '–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:'},
            'Unlock Vault': {'english': 'Unlock Vault', 'russian': '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'},
            'Stored Passwords': {'english': 'Stored Passwords', 'russian': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏'},
            'Add Password Manually': {'english': 'Add Password Manually', 'russian': '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é'},
            'Show password': {'english': 'Show password', 'russian': '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å'},
            'Clear Fields': {'english': 'Clear Fields', 'russian': '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è'},
            'Error': {'english': 'Error', 'russian': '–û—à–∏–±–∫–∞'},
            'Warning': {'english': 'Warning', 'russian': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'},
            'Success': {'english': 'Success', 'russian': '–£—Å–ø–µ—Ö'},
            'Info': {'english': 'Info', 'russian': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'},
            'Vault is locked!': {'english': 'Vault is locked!', 'russian': '–•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!'},
            'Please fill all fields': {'english': 'Please fill all fields', 'russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'},
            'Please select at least one character set': {'english': 'Please select at least one character set', 
                                                       'russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤'},
            'Password generated and copied to clipboard!': {'english': 'Password generated and copied to clipboard!', 
                                                          'russian': '–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!'},
            'Password saved successfully!': {'english': 'Password saved successfully!', 
                                           'russian': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'},
            'Please enter master password': {'english': 'Please enter master password', 
                                           'russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å'},
            'Vault unlocked successfully!': {'english': 'Vault unlocked successfully!', 
                                           'russian': '–•—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!'},
            'Wrong master password or corrupted vault!': {'english': 'Wrong master password or corrupted vault!', 
                                                        'russian': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!'},
            'No passwords stored yet': {'english': 'No passwords stored yet', 'russian': '–ü–∞—Ä–æ–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'},
            'Copy': {'english': 'Copy', 'russian': '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'},
            'Copy All': {'english': 'Copy All', 'russian': '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë'},
            'Copied to clipboard!': {'english': 'Copied to clipboard!', 'russian': '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!'},
            'Language changed successfully!': {'english': 'Language changed successfully!', 
                                             'russian': '–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!'},
            'About': {'english': 'About', 'russian': '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'},
            'Search:': {'english': 'Search:', 'russian': '–ü–æ–∏—Å–∫:'},
            'Site': {'english': 'Site', 'russian': '–°–∞–π—Ç'},
        }
        return translations.get(text, {}).get(self.language, text)

if __name__ == "__main__":
    app = PasswordManager()
    app.root.mainloop()